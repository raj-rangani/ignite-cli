#!/bin/bash

# Simplified version of dev-cli.sh that calls flutter-project.sh
# This is a workaround for the syntax issue in the original file

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check if the Flutter script exists
if [[ ! -f "${SCRIPT_DIR}/flutter-project.sh" ]]; then
    echo "Error: flutter-project.sh not found in ${SCRIPT_DIR}"
    exit 1
fi

# Show help message
function show_help {
    echo "Developer CLI Tool - Streamline your development environment setup"
    echo ""
    echo "Usage: dev-cli [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  start             Start the guided project setup workflow"
    echo "  flutter           Run Flutter project creation"
    echo ""
    echo "Options:"
    echo "  -h, --help        Show this help message"
    echo "  -v, --version     Show version information"
    echo ""
    echo "Examples:"
    echo "  dev-cli start"
    echo "  dev-cli flutter"
}

# Show version information
function show_version {
    echo "Developer CLI Tool v1.0.0"
}

# Main function to handle command routing
function main {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        show_help
        exit 0
    fi

    if [[ "$1" == "-v" || "$1" == "--version" ]]; then
        show_version
        exit 0
    fi
    
    # If no arguments or "flutter" is provided, begin flutter project creation
    if [[ $# -eq 0 || "$1" == "flutter" ]]; then
        echo "Starting Flutter project creation..."
        "${SCRIPT_DIR}/flutter-project.sh"
        exit 0
    fi
    
    # If any other command is provided, show help
    echo "Error: Unknown command: $1"
    show_help
    exit 1
}

# Execute main function with all arguments
main "$@" 